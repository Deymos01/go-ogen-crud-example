// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// AddCar implements addCar operation.
	//
	// Add a new car to the storage.
	//
	// POST /cars
	AddCar(ctx context.Context, req *NewCar) (*Car, error)
	// DeleteCarById implements deleteCarById operation.
	//
	// Remove a car from storage using its ID.
	//
	// DELETE /cars/{id}
	DeleteCarById(ctx context.Context, params DeleteCarByIdParams) (DeleteCarByIdRes, error)
	// GetCarById implements getCarById operation.
	//
	// Get a car using its ID.
	//
	// GET /cars/{id}
	GetCarById(ctx context.Context, params GetCarByIdParams) (GetCarByIdRes, error)
	// ListCars implements listCars operation.
	//
	// Get a list of all cars currently stored.
	//
	// GET /cars
	ListCars(ctx context.Context) ([]Car, error)
	// UpdateCarById implements updateCarById operation.
	//
	// Modify an existing car's details using its ID.
	//
	// PUT /cars/{id}
	UpdateCarById(ctx context.Context, req *UpdateCar, params UpdateCarByIdParams) (UpdateCarByIdRes, error)
	// NewError creates *ErrorStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ErrorStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
