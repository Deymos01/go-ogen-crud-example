// Code generated by ogen, DO NOT EDIT.

package oas

// Ref: #/components/schemas/Car
type Car struct {
	ID           int    `json:"id"`
	Manufacturer string `json:"manufacturer"`
	Model        string `json:"model"`
	Year         int    `json:"year"`
	Color        string `json:"color"`
}

// GetID returns the value of ID.
func (s *Car) GetID() int {
	return s.ID
}

// GetManufacturer returns the value of Manufacturer.
func (s *Car) GetManufacturer() string {
	return s.Manufacturer
}

// GetModel returns the value of Model.
func (s *Car) GetModel() string {
	return s.Model
}

// GetYear returns the value of Year.
func (s *Car) GetYear() int {
	return s.Year
}

// GetColor returns the value of Color.
func (s *Car) GetColor() string {
	return s.Color
}

// SetID sets the value of ID.
func (s *Car) SetID(val int) {
	s.ID = val
}

// SetManufacturer sets the value of Manufacturer.
func (s *Car) SetManufacturer(val string) {
	s.Manufacturer = val
}

// SetModel sets the value of Model.
func (s *Car) SetModel(val string) {
	s.Model = val
}

// SetYear sets the value of Year.
func (s *Car) SetYear(val int) {
	s.Year = val
}

// SetColor sets the value of Color.
func (s *Car) SetColor(val string) {
	s.Color = val
}

func (*Car) getCarByIdRes()    {}
func (*Car) updateCarByIdRes() {}

// DeleteCarByIdNoContent is response for DeleteCarById operation.
type DeleteCarByIdNoContent struct{}

func (*DeleteCarByIdNoContent) deleteCarByIdRes() {}

// Represents error object.
// Ref: #/components/schemas/Error
type Error struct {
	Code    int64  `json:"code"`
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *Error) GetCode() int64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *Error) SetCode(val int64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val string) {
	s.Message = val
}

func (*Error) deleteCarByIdRes() {}
func (*Error) getCarByIdRes()    {}
func (*Error) updateCarByIdRes() {}

// Ref: #/components/schemas/NewCar
type NewCar struct {
	Manufacturer string `json:"manufacturer"`
	Model        string `json:"model"`
	Year         int    `json:"year"`
	Color        string `json:"color"`
}

// GetManufacturer returns the value of Manufacturer.
func (s *NewCar) GetManufacturer() string {
	return s.Manufacturer
}

// GetModel returns the value of Model.
func (s *NewCar) GetModel() string {
	return s.Model
}

// GetYear returns the value of Year.
func (s *NewCar) GetYear() int {
	return s.Year
}

// GetColor returns the value of Color.
func (s *NewCar) GetColor() string {
	return s.Color
}

// SetManufacturer sets the value of Manufacturer.
func (s *NewCar) SetManufacturer(val string) {
	s.Manufacturer = val
}

// SetModel sets the value of Model.
func (s *NewCar) SetModel(val string) {
	s.Model = val
}

// SetYear sets the value of Year.
func (s *NewCar) SetYear(val int) {
	s.Year = val
}

// SetColor sets the value of Color.
func (s *NewCar) SetColor(val string) {
	s.Color = val
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/UpdateCar
type UpdateCar struct {
	Manufacturer OptString `json:"manufacturer"`
	Model        OptString `json:"model"`
	Year         OptInt    `json:"year"`
	Color        OptString `json:"color"`
}

// GetManufacturer returns the value of Manufacturer.
func (s *UpdateCar) GetManufacturer() OptString {
	return s.Manufacturer
}

// GetModel returns the value of Model.
func (s *UpdateCar) GetModel() OptString {
	return s.Model
}

// GetYear returns the value of Year.
func (s *UpdateCar) GetYear() OptInt {
	return s.Year
}

// GetColor returns the value of Color.
func (s *UpdateCar) GetColor() OptString {
	return s.Color
}

// SetManufacturer sets the value of Manufacturer.
func (s *UpdateCar) SetManufacturer(val OptString) {
	s.Manufacturer = val
}

// SetModel sets the value of Model.
func (s *UpdateCar) SetModel(val OptString) {
	s.Model = val
}

// SetYear sets the value of Year.
func (s *UpdateCar) SetYear(val OptInt) {
	s.Year = val
}

// SetColor sets the value of Color.
func (s *UpdateCar) SetColor(val OptString) {
	s.Color = val
}
